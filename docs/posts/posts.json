[
  {
    "path": "posts/2021-12-08-jpndisrictsetup/",
    "title": "jpndistrictのDocker環境設定",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "fuuuumin",
        "url": "https://fu-om.github.io/ByTheWay/"
      }
    ],
    "date": "2021-12-08",
    "categories": [
      "R",
      "Docker"
    ],
    "contents": "\njpndistrictのinstallに失敗する\nただの備忘録。jpndistrictを用いて、この記事に従って地図を作成しようとしたところ、installで失敗する。Windows, WSL2で実行した。\n.docker-compose.ymlがrepo内にあるため、docker compose upで実行したものの、パラメータが足りずに実行できない。結局、Dockerfileから実行することにした。\n実行環境: WSL2\n\n> cat /etc/lsb-releases\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=20.04\nDISTRIB_CODENAME=focal\nDISTRIB_DESCRIPTION=\"Ubuntu 20.04.3 LTS\"\n\nまずは、repoをclone。\n\n> git clone https://github.com/uribo/jpndistrict\n\ndocker imageを作成。rstudio server実行。\n\n> cd jpndistrict\n> docker build . -t uribo/jpndistrict:latest\n> docker run -e PASSWORD=password -p 8787:8787 -v $(pwd):/home/rstudio -d --name jpndistrict uribo/jpndistrict:latest\n\nlocalhost:87887にアクセス。必要パッケージをインストール。\n\n\ninstall.packages(\"fastmap\")\ninstall.packages(\"Rcpp\")\nremotes::install_github(\"uribo/jpndistrict\")\n\n\n\n以上で環境構築完了。\n\n\n\n",
    "preview": {},
    "last_modified": "2021-12-08T04:48:06+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-23-readmanyfiles/",
    "title": "多くのファイルを遅延評価で読み込み、メモリ消費を抑える",
    "description": "quosureを用いると計算が必要なときに読み込まれて、メモリ消費を抑えられる。",
    "author": [
      {
        "name": "fuuuumin",
        "url": "https://fu-om.github.io/ByTheWay/"
      }
    ],
    "date": "2021-09-23",
    "categories": [
      "R",
      "tidyverse"
    ],
    "contents": "\nサンプルデータ作成\nn: ファイル数, nr:行数, nc:列数\n新しくdataディレクトリを直下に掘る\n1.csv … n.csvを作成\n\n\nset.seed(2021)\nn <- 100\nnr <- 100; nc <- 10\nf = map_chr(1:n, ~str_c(\"./data/\", .x, \".csv\"))\nifelse(!dir.exists(file.path(\"./data\")), dir.create(file.path(\"./data\")), FALSE)\n\n\n[1] FALSE\n\ncreate_random_df <- function(nr, nc, path) {\n  mat <- matrix(rnorm(nr*nc), nr, nc)\n  colnames(mat) <- map_chr(1:nc, ~str_c(\"col_\", .x))\n  df <- as_tibble(mat)\n  write_csv(df, file = path)\n}\nwalk(f, ~create_random_df(nr, nc, .x))\n\n\n\n\n\nread_csv(\"data/1.csv\") %>% head() %>% knitr::kable()\n\n\ncol_1\ncol_2\ncol_3\ncol_4\ncol_5\ncol_6\ncol_7\ncol_8\ncol_9\ncol_10\n-0.1224600\n-0.2603365\n0.2701953\n1.2060572\n-0.6745562\n0.2159818\n0.1492579\n0.5683032\n0.5534009\n-0.9598381\n0.5524566\n0.4503400\n-1.3432502\n0.9941102\n0.2381266\n-1.3925378\n-0.3123636\n0.9520432\n-1.1167970\n0.8789497\n0.3486495\n-0.1428816\n-0.8488889\n1.5391577\n0.5450859\n-0.0743782\n-1.2595894\n1.2442086\n0.5740307\n0.6760329\n0.3596322\n-0.4867215\n-0.4076079\n0.2918469\n-0.4488515\n-1.1360389\n0.0519813\n0.7995387\n1.2043346\n1.0426258\n0.8980537\n-1.1957732\n-0.6661505\n0.5105483\n0.9712467\n-0.4295111\n0.2044272\n-0.2429687\n0.7274956\n0.8920711\n-1.9225695\n0.0469410\n-0.1032374\n-0.5409150\n-1.5471639\n0.4795757\n1.3869823\n-2.1849709\n-0.7023848\n1.2172707\n\ncsvファイルの名前を1列にしたtribble\n\n\nlist_csv <- list.files(path = \"data\", \n                       pattern = \".csv\", full.names = TRUE)\ndf_csv <- tribble(~paths, list_csv) %>% \n  unnest(cols = paths)\n\ndf_csv %>% head() %>% knitr::kable()\n\n\npaths\ndata/1.csv\ndata/10.csv\ndata/100.csv\ndata/11.csv\ndata/12.csv\ndata/13.csv\n\n遅延評価\nまず、dataframes列でread_csvをquosureにして評価しない。さらに、各dataframeに行う処理(今回の場合はnrow())をquosureとしている。その後、nrows列をrlang::eval_tidyで評価している。\n\n\ndf_csv <- df_csv %>% \n  mutate(dataframes=map(.x=paths, ~quo(read_csv(.x, col_types = cols())))) %>% \n  mutate(nrows=map(.x=dataframes, ~quo(nrow(rlang::eval_tidy(.x)))))\n\ndf_csv <- df_csv %>% \n  mutate(nrows_eval = map(nrows, rlang::eval_tidy)) %>% \n  unnest(nrows_eval)\ndf_csv %>% head() %>% knitr::kable()\n\n\npaths\ndataframes\nnrows\nnrows_eval\ndata/1.csv\n~read_csv(.x, col_types = cols())\n~nrow(rlang::eval_tidy(.x))\n100\ndata/10.csv\n~read_csv(.x, col_types = cols())\n~nrow(rlang::eval_tidy(.x))\n100\ndata/100.csv\n~read_csv(.x, col_types = cols())\n~nrow(rlang::eval_tidy(.x))\n100\ndata/11.csv\n~read_csv(.x, col_types = cols())\n~nrow(rlang::eval_tidy(.x))\n100\ndata/12.csv\n~read_csv(.x, col_types = cols())\n~nrow(rlang::eval_tidy(.x))\n100\ndata/13.csv\n~read_csv(.x, col_types = cols())\n~nrow(rlang::eval_tidy(.x))\n100\n\n複数の処理をしたいときは？\n実行したい関数をtribbleで返す関数をまとめておく(この場合、my_func)。そして新しいtribbleの列を作成する。\n\n\nlist_csv <- list.files(path = \"data\", \n                       pattern = \".csv\", full.names = TRUE)\ndf_csv <- tribble(~paths, list_csv) %>% \n  unnest(cols = paths)\nmy_func <- function(x) {\n  x <- rlang::eval_tidy(x)\n  tribble(~nrows, ~ncols,\n          nrow(x), ncol(x))\n}\n\ndf_csv <- df_csv %>% \n  mutate(dataframes = map(.x=paths, ~quo(read_csv(.x, col_types = cols())))) %>% \n  mutate(nrows_and_ncols = map(dataframes, my_func))\n\ndf_csv %>% head()\n\n\n# A tibble: 6 × 3\n  paths        dataframes nrows_and_ncols \n  <chr>        <list>     <list>          \n1 data/1.csv   <quosure>  <tibble [1 × 2]>\n2 data/10.csv  <quosure>  <tibble [1 × 2]>\n3 data/100.csv <quosure>  <tibble [1 × 2]>\n4 data/11.csv  <quosure>  <tibble [1 × 2]>\n5 data/12.csv  <quosure>  <tibble [1 × 2]>\n6 data/13.csv  <quosure>  <tibble [1 × 2]>\n\n最後にtribbleをunnestして分解してあげる。\n\n\ndf_csv %>% \n  unnest(cols = nrows_and_ncols) %>% \n  head() %>% knitr::kable()\n\n\npaths\ndataframes\nnrows\nncols\ndata/1.csv\n~read_csv(.x, col_types = cols())\n100\n10\ndata/10.csv\n~read_csv(.x, col_types = cols())\n100\n10\ndata/100.csv\n~read_csv(.x, col_types = cols())\n100\n10\ndata/11.csv\n~read_csv(.x, col_types = cols())\n100\n10\ndata/12.csv\n~read_csv(.x, col_types = cols())\n100\n10\ndata/13.csv\n~read_csv(.x, col_types = cols())\n100\n10\n\n参考\nブログ記事\nAdvanced R\n\n\n\n",
    "preview": {},
    "last_modified": "2021-12-08T04:43:05+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-19-cmdstanrwithgpu/",
    "title": "CmdStanRでGPU(OpenCL)を使う",
    "description": "CmdStanRの導入とOpenCLのメモ",
    "author": [
      {
        "name": "fuuuumin",
        "url": "https://fu-om.github.io/ByTheWay/"
      }
    ],
    "date": "2021-09-20",
    "categories": [
      "R",
      "Stan",
      "GPU"
    ],
    "contents": "\n動機\nDLとかRapidsでどの誤家庭でもあるGPUは高速化のために使えるが、ベイズモデリングで簡単にGPUを利用できるものがなかった。CmdStan 2.26.1以降でOpenCL対応したようなので試してみた。CmdStanRはターミナルで扱うCmdStanをRで使えるようにしたラッパーになる。rstanパッケージよりもコンパイルが高速であるらしい。清水先生の資料\n環境確認\n\ncat /etc/lsb-release \nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=20.04\nDISTRIB_CODENAME=focal\nDISTRIB_DESCRIPTION=\"Ubuntu 20.04.1 LTS\"\n\n\nclinfo -l\nPlatform #0: NVIDIA CUDA\n `-- Device #0: NVIDIA GeForce GTX 1080 Ti\n\nWindowsは、GPUサポートのWSL2を使う。あとは、必要に応じてnvidia-driverなど入れる。\nTL;DR CmdStanでOpenCLを使うため\n公式ドキュメントとvignettes\nCmdStanRを導入するときに特別なことは必要ない\napt install nvidia-opencl-devが必要だった\nOpenCLでコンパイルするためには、make/localに追記または、コンパイル時にcpp_options = list(stan_opencl = TRUE)を渡す\nCmdStanRのインストール\n\n\ninstall.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\")))\n\n\n\nいつものパッケージと同様にインストールできる。次にCmdStan本体をインストールする。\nC++コンパイラなどを確認する。\n\n\ncheck_cmdstan_toolchain()\n\n\n\nCmdStan本体をインストールはこれだけ。\n\n\ninstall_cmdstan(cores = 2)\n\n\n\nインストール先は、~/.cmdstanr/cmdstan-2.27.0/\n\n$tree -L 1  ~/.cmdstanr/cmdstan-2.27.0/ \n~/.cmdstanr/cmdstan-2.27.0/\n├── bin\n├── examples\n├── install-tbb.bat\n├── Jenkinsfile\n├── lib\n├── LICENSE\n├── make\n├── makefile\n├── README.md\n├── runCmdStanTests.py\n├── src\n├── stan\n└── test-all.sh\n\nOpenCLでコンパイルする場合は、make/localファイルを編集して、以下を追記する。\nSTAN_OPENCL=true\nあるいは、モデルコンパイル時に、cpp_options = list(stan_opencl = TRUE)を渡す。\n確認\nexamplesがあるので実行してみる。\n\n\ncmdstanr::cmdstanr_example(example=\"schools\", chains=2, quiet=FALSE, refresh = 1000)\n\n\nRunning MCMC with 2 sequential chains...\n\nChain 1 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 1 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 1 finished in 0.1 seconds.\nChain 2 Iteration:    1 / 2000 [  0%]  (Warmup) \nChain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup) \nChain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling) \nChain 2 Iteration: 2000 / 2000 [100%]  (Sampling) \nChain 2 finished in 0.1 seconds.\n\nBoth chains finished successfully.\nMean chain execution time: 0.1 seconds.\nTotal execution time: 1.0 seconds.\n variable   mean median   sd  mad     q5    q95 rhat ess_bulk\n lp__     -56.17 -56.11 6.19 7.66 -65.93 -46.80 1.10       19\n mu         6.90   7.08 3.90 3.76   0.17  13.41 1.09      204\n tau        4.51   3.40 3.72 3.29   0.87  11.85 1.13       14\n theta[1]   9.40   8.28 6.61 4.67   0.37  21.70 1.04      297\n theta[2]   7.17   7.45 5.22 3.99  -1.98  15.70 1.05      400\n theta[3]   6.34   6.91 6.03 4.48  -4.79  15.30 1.05      290\n theta[4]   6.98   7.01 5.48 4.00  -1.94  15.81 1.06      434\n theta[5]   5.47   6.29 5.30 4.23  -4.01  13.41 1.06      229\n theta[6]   5.99   6.39 5.66 4.54  -4.20  14.40 1.06      244\n theta[7]   9.04   8.50 5.52 4.39   0.86  19.35 1.03      282\n ess_tail\n       51\n      180\n       26\n      689\n      838\n      722\n      659\n      228\n      630\n      644\n\n # showing 10 of 11 rows (change via 'max_rows' argument or 'cmdstanr_max_rows' option)\n\nnvidia-smiなどでGPUで実行できているか確認できる。\n感想\nここらへんの大きめなSEIRモデルでどう振る舞うか確認したい。ところでknitrってbashを組み込めるのですね。\n\n\n\n",
    "preview": {},
    "last_modified": "2021-09-19T21:13:45+00:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-18-functionswithdplyr/",
    "title": "dplyrを使った関数",
    "description": "dplyrを関数で使うためのメモ",
    "author": [
      {
        "name": "fuuuumin",
        "url": "https://fu-om.github.io/ByTheWay/"
      }
    ],
    "date": "2021-09-18",
    "categories": [
      "R",
      "tidyverse"
    ],
    "contents": "\ndplyrを使った関数\n探索的に使うdplyr.\n\n\nmtcars %>% \n  filter(cyl == 6) %>% \n  rmarkdown::paged_table()\n\n\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"mpg\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cyl\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"disp\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hp\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"drat\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"wt\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"qsec\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vs\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"am\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"gear\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carb\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.620\",\"7\":\"16.46\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Mazda RX4\"},{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.875\",\"7\":\"17.02\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Mazda RX4 Wag\"},{\"1\":\"21.4\",\"2\":\"6\",\"3\":\"258.0\",\"4\":\"110\",\"5\":\"3.08\",\"6\":\"3.215\",\"7\":\"19.44\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\",\"_rn_\":\"Hornet 4 Drive\"},{\"1\":\"18.1\",\"2\":\"6\",\"3\":\"225.0\",\"4\":\"105\",\"5\":\"2.76\",\"6\":\"3.460\",\"7\":\"20.22\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\",\"_rn_\":\"Valiant\"},{\"1\":\"19.2\",\"2\":\"6\",\"3\":\"167.6\",\"4\":\"123\",\"5\":\"3.92\",\"6\":\"3.440\",\"7\":\"18.30\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Merc 280\"},{\"1\":\"17.8\",\"2\":\"6\",\"3\":\"167.6\",\"4\":\"123\",\"5\":\"3.92\",\"6\":\"3.440\",\"7\":\"18.90\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Merc 280C\"},{\"1\":\"19.7\",\"2\":\"6\",\"3\":\"145.0\",\"4\":\"175\",\"5\":\"3.62\",\"6\":\"2.770\",\"7\":\"15.50\",\"8\":\"0\",\"9\":\"1\",\"10\":\"5\",\"11\":\"6\",\"_rn_\":\"Ferrari Dino\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\n特に問題ない.\n\n\nmy_filter <- function(filter_var, condition, df=mtcars) {\n  df %>% \n    filter(filter_var == condition)\n}\nmy_filter(cyl, 6, mtcars) %>% rmarkdown::paged_table()\n\n\n\nProblem with `filter()` input `..1`.\nx object 'cyl' not found\nℹ Input `..1` is `filter_var == condition`.\nどうやら、filter_varを参照している。cylを参照してもらいたい。\nenquo()を使う方法\n\n\nmy_filter <- function(filter_var, condition, df=mtcars) {\n  filter_var <- enquo(filter_var)\n  df %>% \n    filter(!!filter_var == condition)\n}\nmy_filter(cyl, 6, mtcars) %>% rmarkdown::paged_table()\n\n\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"mpg\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cyl\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"disp\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hp\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"drat\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"wt\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"qsec\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vs\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"am\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"gear\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carb\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.620\",\"7\":\"16.46\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Mazda RX4\"},{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.875\",\"7\":\"17.02\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Mazda RX4 Wag\"},{\"1\":\"21.4\",\"2\":\"6\",\"3\":\"258.0\",\"4\":\"110\",\"5\":\"3.08\",\"6\":\"3.215\",\"7\":\"19.44\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\",\"_rn_\":\"Hornet 4 Drive\"},{\"1\":\"18.1\",\"2\":\"6\",\"3\":\"225.0\",\"4\":\"105\",\"5\":\"2.76\",\"6\":\"3.460\",\"7\":\"20.22\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\",\"_rn_\":\"Valiant\"},{\"1\":\"19.2\",\"2\":\"6\",\"3\":\"167.6\",\"4\":\"123\",\"5\":\"3.92\",\"6\":\"3.440\",\"7\":\"18.30\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Merc 280\"},{\"1\":\"17.8\",\"2\":\"6\",\"3\":\"167.6\",\"4\":\"123\",\"5\":\"3.92\",\"6\":\"3.440\",\"7\":\"18.90\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Merc 280C\"},{\"1\":\"19.7\",\"2\":\"6\",\"3\":\"145.0\",\"4\":\"175\",\"5\":\"3.62\",\"6\":\"2.770\",\"7\":\"15.50\",\"8\":\"0\",\"9\":\"1\",\"10\":\"5\",\"11\":\"6\",\"_rn_\":\"Ferrari Dino\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\nNon Standard Evaluationの詳しい説明\n簡単な方法{{}}\n\n\nmy_filter2 <- function(filter_var, condition, df=mtcars) {\n  df %>% \n    filter({{filter_var}} == condition)\n}\nmy_filter2(cyl, 6, mtcars) %>% rmarkdown::paged_table()\n\n\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"mpg\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cyl\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"disp\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hp\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"drat\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"wt\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"qsec\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vs\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"am\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"gear\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carb\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.620\",\"7\":\"16.46\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Mazda RX4\"},{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.875\",\"7\":\"17.02\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Mazda RX4 Wag\"},{\"1\":\"21.4\",\"2\":\"6\",\"3\":\"258.0\",\"4\":\"110\",\"5\":\"3.08\",\"6\":\"3.215\",\"7\":\"19.44\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\",\"_rn_\":\"Hornet 4 Drive\"},{\"1\":\"18.1\",\"2\":\"6\",\"3\":\"225.0\",\"4\":\"105\",\"5\":\"2.76\",\"6\":\"3.460\",\"7\":\"20.22\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\",\"_rn_\":\"Valiant\"},{\"1\":\"19.2\",\"2\":\"6\",\"3\":\"167.6\",\"4\":\"123\",\"5\":\"3.92\",\"6\":\"3.440\",\"7\":\"18.30\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Merc 280\"},{\"1\":\"17.8\",\"2\":\"6\",\"3\":\"167.6\",\"4\":\"123\",\"5\":\"3.92\",\"6\":\"3.440\",\"7\":\"18.90\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Merc 280C\"},{\"1\":\"19.7\",\"2\":\"6\",\"3\":\"145.0\",\"4\":\"175\",\"5\":\"3.62\",\"6\":\"2.770\",\"7\":\"15.50\",\"8\":\"0\",\"9\":\"1\",\"10\":\"5\",\"11\":\"6\",\"_rn_\":\"Ferrari Dino\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\n複数の引数のとき\n\n\nmy_select <- function(df=mtcars, ...) {\n  vars <- enquos(...)\n  df %>% \n    select(!!!vars)\n}\nmy_select(mtcars, mpg, cyl) %>% rmarkdown::paged_table()\n\n\n\n\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"mpg\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cyl\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"21.0\",\"2\":\"6\",\"_rn_\":\"Mazda RX4\"},{\"1\":\"21.0\",\"2\":\"6\",\"_rn_\":\"Mazda RX4 Wag\"},{\"1\":\"22.8\",\"2\":\"4\",\"_rn_\":\"Datsun 710\"},{\"1\":\"21.4\",\"2\":\"6\",\"_rn_\":\"Hornet 4 Drive\"},{\"1\":\"18.7\",\"2\":\"8\",\"_rn_\":\"Hornet Sportabout\"},{\"1\":\"18.1\",\"2\":\"6\",\"_rn_\":\"Valiant\"},{\"1\":\"14.3\",\"2\":\"8\",\"_rn_\":\"Duster 360\"},{\"1\":\"24.4\",\"2\":\"4\",\"_rn_\":\"Merc 240D\"},{\"1\":\"22.8\",\"2\":\"4\",\"_rn_\":\"Merc 230\"},{\"1\":\"19.2\",\"2\":\"6\",\"_rn_\":\"Merc 280\"},{\"1\":\"17.8\",\"2\":\"6\",\"_rn_\":\"Merc 280C\"},{\"1\":\"16.4\",\"2\":\"8\",\"_rn_\":\"Merc 450SE\"},{\"1\":\"17.3\",\"2\":\"8\",\"_rn_\":\"Merc 450SL\"},{\"1\":\"15.2\",\"2\":\"8\",\"_rn_\":\"Merc 450SLC\"},{\"1\":\"10.4\",\"2\":\"8\",\"_rn_\":\"Cadillac Fleetwood\"},{\"1\":\"10.4\",\"2\":\"8\",\"_rn_\":\"Lincoln Continental\"},{\"1\":\"14.7\",\"2\":\"8\",\"_rn_\":\"Chrysler Imperial\"},{\"1\":\"32.4\",\"2\":\"4\",\"_rn_\":\"Fiat 128\"},{\"1\":\"30.4\",\"2\":\"4\",\"_rn_\":\"Honda Civic\"},{\"1\":\"33.9\",\"2\":\"4\",\"_rn_\":\"Toyota Corolla\"},{\"1\":\"21.5\",\"2\":\"4\",\"_rn_\":\"Toyota Corona\"},{\"1\":\"15.5\",\"2\":\"8\",\"_rn_\":\"Dodge Challenger\"},{\"1\":\"15.2\",\"2\":\"8\",\"_rn_\":\"AMC Javelin\"},{\"1\":\"13.3\",\"2\":\"8\",\"_rn_\":\"Camaro Z28\"},{\"1\":\"19.2\",\"2\":\"8\",\"_rn_\":\"Pontiac Firebird\"},{\"1\":\"27.3\",\"2\":\"4\",\"_rn_\":\"Fiat X1-9\"},{\"1\":\"26.0\",\"2\":\"4\",\"_rn_\":\"Porsche 914-2\"},{\"1\":\"30.4\",\"2\":\"4\",\"_rn_\":\"Lotus Europa\"},{\"1\":\"15.8\",\"2\":\"8\",\"_rn_\":\"Ford Pantera L\"},{\"1\":\"19.7\",\"2\":\"6\",\"_rn_\":\"Ferrari Dino\"},{\"1\":\"15.0\",\"2\":\"8\",\"_rn_\":\"Maserati Bora\"},{\"1\":\"21.4\",\"2\":\"4\",\"_rn_\":\"Volvo 142E\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  \n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-09-19T07:06:38+00:00",
    "input_file": {}
  }
]
